// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// because PlanetScale does not support foreign key constraints and 
// Prisma defautls to using foreign keys to express relations,
// we need to set this "referentialIntegrity" property 
// when using Prisma with PlanetScale

// “Referential integrity is a property of a data set that states 
// that all its references are valid. Referential integrity requires 
// that if one record references another, then the referenced record 
// must exist. For example, if a Post model defines an author, then 
// the author must also exist.“ 

enum Auth {
  user
  admin
  kitchen
  bar
}


model User {
  id              String         @id @default(cuid())
  firstName       String
  lastName        String
  alias           String?
  password        String         @unique
  auth            String         @default("user")
  email           String
  birthDate       DateTime
  phoneNumber    String
  status         String @default("active")
  profileImageId  String
  juiceRequested  JuiceRequest[] @relation("UserOnRequest")
  editedDishes    Dish[]  // a user can edit many dishes
  createdAt       DateTime       @default(now())
  lastEdited      DateTime       @updatedAt
  

  @@unique([firstName, lastName, password])
}

model Task {
  id           String   @id @default(cuid())
  name         String
  description  String
  createdAt    DateTime @default(now())
  lastEdited   DateTime @updatedAt
  roleId       String
  role         Role     @relation(fields: [roleId], references: [id]) // a task can only belong to one role
  doTimeId     String
  doTime       DoTime   @relation(fields: [doTimeId], references: [id]) // a task can only belong to one do time

  @@index([roleId])
  @@index([doTimeId])
}

model Role {
  id          String   @id @default(cuid())
  name        String
  description String @default("") @db.LongText
  createdAt   DateTime @default(now())
  lastEdited  DateTime @updatedAt
  tasks       Task[] // one role can have many tasks
  subDepartment SubDepartment @relation(fields: [subDepartmentId], references: [id]) // a role can only belong to one department
  subDepartmentId String

  @@index([subDepartmentId])
}

model Department {
  id          String   @id @default(cuid())
  name        String
  description String   @db.LongText
  createdAt   DateTime @default(now())
  lastEdited  DateTime @updatedAt
  subDepartments SubDepartment[] // one department can have many sub departments
}

model SubDepartment {
  id          String   @id @default(cuid())
  name        String
  description String   @db.LongText
  createdAt   DateTime @default(now())
  lastEdited  DateTime @updatedAt
  department Department @relation(fields: [departmentId], references: [id]) // a sub department can only belong to one department
  departmentId String
  roles       Role[] // one sub department can have many roles

  @@index([departmentId])
}

model DoTime {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  lastEdited  DateTime @updatedAt
  tasks       Task[] // one do time can have many tasks
}

model Day {
  id             String   @id @default(cuid())
  startingCovers Int
  endingCovers   Int
  date           DateTime @default(now())
  totalSales     Int
  totalTips      Int
  weather        String
  notes          String
}

model Priority {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  lastEdited  DateTime @updatedAt
}

model JuiceRequest {
  id                String   @id @default(cuid())
  requestFrom       User     @relation(name: "UserOnRequest", fields: [requestFromId], references: [id])
  requestFromId     String
  lemonAmount       Float
  orangeAmount      Float
  grapefruitAmount  Float
  notes             String?
  createdAt         DateTime @default(now())
  lastEdited        DateTime @updatedAt

  @@index([requestFromId])
}

model Menu {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  lastEdited  DateTime @updatedAt
  menuType    String @default("food")
  menuSections MenuSection[] // one menu can have many menu sections
  dishes      Dish[] // one menu can have many dishes
}

model MenuSection {
  id          String   @id @default(cuid())
  name        String
  arrangementInMenu Int @default(0)
  createdAt   DateTime @default(now())
  lastEdited  DateTime @updatedAt
  menus        Menu    @relation(fields: [menuId], references: [id]) // a menu section can only belong to one menu
  menuId      String
  dishes      Dish[] // one menu section can have many dishes

  @@index([menuId])
}

model Dish {
  id          String   @id @default(cuid())
  name        String
  description String   @db.LongText
  advertisedDescription String?
  price       Float
  createdAt   DateTime @default(now())
  lastEdited  DateTime @updatedAt
  menu Menu[] // a dish can belong to many menus
  menuSection MenuSection[] // a dish can belong to many menu sections
  arrangementInMenuSection Int @default(0)
  imageId     String
  allergens   Allergen[] // a dish can have many allergens
  lastEditedBy User @relation(fields: [lastEditedById], references: [id]) // a dish can only have one last editor
  lastEditedById String
  active      Boolean @default(true)

  @@index([lastEditedById])
}

model Component {
  id          String   @id @default(cuid())
  name        String
  description String?
  removable   Boolean
  ingredients Ingredient[] // many components can have many ingredients
  createdAt   DateTime @default(now())
  lastEdited  DateTime @updatedAt
}

model Allergen {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  lastEdited  DateTime @updatedAt
  dishes      Dish[] // many allergens can belong to many dishes
}

model Ingredient {
  id          String   @id @default(cuid())
  name        String
  description String?
  components  Component[] // many components can have many ingredients
  createdAt   DateTime @default(now())
  lastEdited  DateTime @updatedAt
}